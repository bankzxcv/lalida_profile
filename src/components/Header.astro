---
const menuItems = [
  { 
    title: "About", 
    url: "#about",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
    </svg>`
  },
  { 
    title: "Skills", 
    url: "#skills",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
    </svg>`
  },
  { 
    title: "Experience", 
    url: "#experience",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
    </svg>`
  },
  { 
    title: "Education", 
    url: "#education",
    icon: `<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path d="M12 14l9-5-9-5-9 5 9 5z" />
      <path d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z" />
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14zm-4 6v-7.5l4-2.222" />
    </svg>`
  }
];
---

<header class="fixed w-full bg-white/90 backdrop-blur-sm z-50 shadow-sm">
  <nav class="container mx-auto px-6 py-4">
    <div class="flex justify-between items-center">
      <a href="/" class="flex items-center gap-2 group">
        <div class="relative">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-medical group-hover:text-medical-dark transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
          </svg>
          <div class="absolute -top-1 -right-1 w-4 h-4 bg-accent rounded-full border-2 border-white group-hover:scale-110 transition-transform"></div>
        </div>
        <div class="flex flex-col">
          <span class="text-2xl font-bold text-medical group-hover:text-medical-dark transition-colors">Lali</span>
          <span class="text-sm text-gray-600">Pediatric Nurse</span>
        </div>
      </a>

      <!-- Desktop Menu -->
      <ul class="hidden md:flex items-center space-x-1">
        {
          menuItems.map((item) => (
            <li>
              <a 
                href={item.url} 
                class="flex items-center gap-2 px-4 py-2 rounded-lg text-gray-600 hover:text-medical hover:bg-medical-light transition-all group"
              >
                <span class="text-medical group-hover:scale-110 transition-transform" set:html={item.icon} />
                <span class="font-medium">{item.title}</span>
              </a>
            </li>
          ))
        }
      </ul>

      <!-- Mobile Menu Button -->
      <div class="md:hidden">
        <button 
          id="mobile-menu-button" 
          class="text-gray-600 hover:text-medical transition-colors p-2 rounded-lg hover:bg-medical-light"
          aria-label="Menu"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="hidden md:hidden mt-4 rounded-lg bg-white shadow-lg border border-gray-100">
      <ul class="py-2">
        {
          menuItems.map((item) => (
            <li>
              <a 
                href={item.url} 
                class="flex items-center gap-3 px-6 py-3 text-gray-600 hover:text-medical hover:bg-medical-light transition-all"
              >
                <span class="text-medical" set:html={item.icon} />
                <span class="font-medium">{item.title}</span>
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</header>

<script>
  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden');
  });

  // Close mobile menu when clicking outside
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    if (!target.closest('#mobile-menu') && !target.closest('#mobile-menu-button')) {
      mobileMenu?.classList.add('hidden');
    }
  });

  // Handle smooth scrolling for anchor links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const href = this.getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        target?.scrollIntoView({
          behavior: 'smooth'
        });
        // Close mobile menu after clicking
        mobileMenu?.classList.add('hidden');
      }
    });
  });

  // Active section highlighting
  const sections = document.querySelectorAll('section[id]');
  const navItems = document.querySelectorAll('nav a[href^="#"]');

  window.addEventListener('scroll', () => {
    let current = '';
    sections.forEach(section => {
      const sectionTop = (section as HTMLElement).offsetTop;
      const sectionHeight = section.clientHeight;
      if (window.scrollY >= sectionTop - 200) {
        current = section.getAttribute('id') || '';
      }
    });

    navItems.forEach(item => {
      item.classList.remove('text-medical', 'bg-medical-light');
      if (item.getAttribute('href')?.slice(1) === current) {
        item.classList.add('text-medical', 'bg-medical-light');
      }
    });
  });
</script>

<style>
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  #mobile-menu:not(.hidden) {
    animation: slideDown 0.2s ease-out;
  }
</style>
